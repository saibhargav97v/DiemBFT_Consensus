import sys
import pickle
from time import sleep
from collections import defaultdict
import logging
import os

class Client(process):

    def setup_logger(config_num, level):

        if not os.path.exists(f"../logs/{config_num}"):
            os.makedirs(f"../logs/{config_num}")
        log_file = f"../logs/{config_num}/client_{id}.log"
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        handler = logging.FileHandler(log_file)       
        handler.setFormatter(formatter)

        logger = logging.getLogger(f"client_{config_num}")
        logger.setLevel(level)
        logger.addHandler(handler)

        return logger

    def setup(id, validators: list, public_keys: list, pvt_key, config_num, time_out, num_messages, num_faulty, parent):  # have to create message class
        self.logger = self.setup_logger(config_num, logging.INFO)
        self.logger.info("Setup done")
        self.exit_flag = 0
        self.quorum_flag = 0
        # self.quorum_set = set()
        self.quorum_map = defaultdict(int)

    def sign_message(msg_obj):
        serialized_msg = pickle.dumps(msg_obj)
        return pvt_key.sign(serialized_msg)

    def run():
        
        while not self.exit_flag:
            i=0
            while i < num_messages:
                self.txn_id = f"{id}_{i}"
                send(('Client', id, sign_message(f"transactions_{self.txn_id}"), logical_clock(),self.txn_id), to=self.validators)
                self.logger.info(f"Message sent with txn_id: {self.txn_id}")
                i+=1
            send(('Client', id, sign_message("dummy"), logical_clock(), self.txn_id), to=self.validators)
            send(('Client', id, sign_message("dummy"), logical_clock(), self.txn_id), to=self.validators)
            if await(self.quorum_flag == 1):
                self.logger.info(f"Length of quorum map :{len(self.quorum_map)}")
                for k,v in self.quorum_map.items():
                    self.logger.info(f"{k} - {v}")
                self.exit_flag = 1
                self.logger.info("Client processing done")
                output('done')
            elif timeout(time_out):
                self.logger.info("In client run method : Timed out... Retransmitting requests")
        self.logger.info("Sending done to runner")
        send(('done', ), to=parent)
        
    
    def receive(msg = (action, sender, message, time, txn_id), from_=p):
        # valid_msg = self.modules['safety'].verify_msg_signature(msg, sender)
        # if valid_msg:
        # msg = pickle.loads(msg.message)
        if action == "Ack":
            self.logger.info(f"From Validator: {sender}, {message}")
            self.quorum_map[txn_id]+=1
            self.logger.info(self.quorum_map)
            if len(self.quorum_map) == num_messages:
                for k, v in self.quorum_map.items():
                    if v < num_faulty + 1:
                        return
                self.quorum_flag = 1
